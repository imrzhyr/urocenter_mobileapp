import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';

// Core imports
import '../../../core/services/call_service.dart';

// Define an enum for call connection states
enum CallConnectionState {
  connecting,
  ringing,
  connected,
  ended,
  failed,
}

// CallControllerState to track state
class CallControllerState {
  final CallConnectionState connectionState;
  final MediaStream? localStream;
  final MediaStream? remoteStream;
  final bool isMuted;
  final bool isSpeakerOn;
  final String? errorMessage;
  final String callStatus; // 'pending', 'ringing', 'answered', 'rejected', 'ended'

  CallControllerState({
    this.connectionState = CallConnectionState.connecting,
    this.localStream,
    this.remoteStream,
    this.isMuted = false,
    this.isSpeakerOn = true,
    this.errorMessage,
    this.callStatus = 'pending',
  });

  CallControllerState copyWith({
    CallConnectionState? connectionState,
    MediaStream? localStream,
    MediaStream? remoteStream,
    bool? isMuted,
    bool? isSpeakerOn,
    String? errorMessage,
    String? callStatus,
  }) {
    return CallControllerState(
      connectionState: connectionState ?? this.connectionState,
      localStream: localStream ?? this.localStream,
      remoteStream: remoteStream ?? this.remoteStream,
      isMuted: isMuted ?? this.isMuted,
      isSpeakerOn: isSpeakerOn ?? this.isSpeakerOn,
      errorMessage: errorMessage ?? this.errorMessage,
      callStatus: callStatus ?? this.callStatus,
    );
  }
}

class CallController extends StateNotifier<CallControllerState> {
  final String callId;
  final bool isCaller;
  final Ref ref;

  RTCPeerConnection? _peerConnection;
  StreamSubscription? _callDocSubscription;
  StreamSubscription? _callerCandidatesSubscription;
  StreamSubscription? _calleeCandidatesSubscription;
  bool _hasAddedIceCandidates = false;

  // Configuration for WebRTC
  final Map<String, dynamic> _configuration = {
    'iceServers': [
      {
        'urls': [
          'stun:stun1.l.google.com:19302',
          'stun:stun2.l.google.com:19302',
        ],
      },
    ],
    'sdpSemantics': 'unified-plan',
  };

  // SDP constraints
  final Map<String, dynamic> _sdpConstraints = {
    'mandatory': {
      'OfferToReceiveAudio': true,
      'OfferToReceiveVideo': true,
    },
    'optional': [],
  };

  CallController(this.ref, this.callId, this.isCaller)
      : super(CallControllerState()) {
    // Initialize call on creation
    initCall();
  }

  // Initialize a call
  Future<void> initCall() async {
    try {
      // Create peer connection
      _peerConnection = await createPeerConnection(_configuration);

      // Set up event listeners for peer connection
      _registerPeerConnectionListeners();

      // Get local media stream
      final localStream = await _getLocalStream();
      state = state.copyWith(
        localStream: localStream,
        connectionState: CallConnectionState.connecting,
        callStatus: 'pending',
      );

      // Add tracks from local stream to peer connection
      localStream.getTracks().forEach((track) {
        _peerConnection!.addTrack(track, localStream);
      });

      // Listen for call document changes
      _listenForCallDocumentChanges();

      // Handle call initiation based on caller status
      if (isCaller) {
        await _createAndSendOffer();
      } else {
        // Wait for offer to be processed in _listenForCallDocumentChanges
        print("[CallController] Waiting for offer as callee...");
      }
    } catch (e) {
      print("[CallController] Error initializing call: $e");
      state = state.copyWith(
        connectionState: CallConnectionState.failed,
        errorMessage: "Failed to initialize call: $e",
      );
    }
  }

  // Get local media stream
  Future<MediaStream> _getLocalStream() async {
    final mediaConstraints = {
      'audio': true,
      'video': false, // Audio-only call
    };

    try {
      return await navigator.mediaDevices.getUserMedia(mediaConstraints);
    } catch (e) {
      print("[CallController] Error getting local stream: $e");
      rethrow;
    }
  }

  // Register listeners for peer connection events
  void _registerPeerConnectionListeners() {
    _peerConnection?.onIceCandidate = _handleIceCandidate;
    _peerConnection?.onIceConnectionState = _handleIceConnectionStateChange;
    _peerConnection?.onAddStream = _handleRemoteStream;
  }

  // Handle new ICE candidate
  void _handleIceCandidate(RTCIceCandidate candidate) async {
    print("[CallController] New ICE candidate: ${candidate.toMap()}");
    
    final callService = ref.read(callServiceProvider);
    if (isCaller) {
      await callService.addCallerIceCandidate(callId, candidate.toMap());
    } else {
      await callService.addCalleeIceCandidate(callId, candidate.toMap());
    }
  }

  // Handle ICE connection state changes
  void _handleIceConnectionStateChange(RTCIceConnectionState state) {
    print("[CallController] ICE connection state change: $state");
    
    switch (state) {
      case RTCIceConnectionState.RTCIceConnectionStateConnected:
        this.state = this.state.copyWith(
          connectionState: CallConnectionState.connected,
        );
        break;
      case RTCIceConnectionState.RTCIceConnectionStateFailed:
        this.state = this.state.copyWith(
          connectionState: CallConnectionState.failed,
          errorMessage: "Connection failed. Please try again.",
        );
        break;
      case RTCIceConnectionState.RTCIceConnectionStateDisconnected:
      case RTCIceConnectionState.RTCIceConnectionStateClosed:
        if (this.state.connectionState != CallConnectionState.ended &&
            this.state.connectionState != CallConnectionState.failed) {
          this.state = this.state.copyWith(
            connectionState: CallConnectionState.ended,
          );
        }
        break;
      default:
        // Handle other states if needed
        break;
    }
  }

  // Handle remote stream
  void _handleRemoteStream(MediaStream stream) {
    print("[CallController] Got remote stream");
    state = state.copyWith(
      remoteStream: stream,
      connectionState: CallConnectionState.connected,
    );
  }

  // Create and send offer
  Future<void> _createAndSendOffer() async {
    try {
      print("[CallController] Creating offer...");
      RTCSessionDescription offer = await _peerConnection!.createOffer(_sdpConstraints);
      await _peerConnection!.setLocalDescription(offer);
      
      // Convert offer to map for Firestore
      final offerMap = {
        'type': offer.type,
        'sdp': offer.sdp,
      };
      
      // Update Firestore with offer
      await FirebaseFirestore.instance.collection('calls').doc(callId).update({
        'offer': offerMap,
      });
      
      // Update status to ringing
      await FirebaseFirestore.instance.collection('calls').doc(callId).update({
        'status': 'ringing',
      });
      
      state = state.copyWith(
        connectionState: CallConnectionState.ringing,
        callStatus: 'ringing',
      );
      
      print("[CallController] Offer created and sent");
    } catch (e) {
      print("[CallController] Error creating/sending offer: $e");
      state = state.copyWith(
        connectionState: CallConnectionState.failed,
        errorMessage: "Failed to create call offer: $e",
      );
    }
  }

  // Process offer and create answer
  Future<void> _processOfferAndCreateAnswer(Map<String, dynamic> offerData) async {
    try {
      print("[CallController] Processing offer and creating answer...");
      
      // Create RTCSessionDescription from offer
      final RTCSessionDescription offer = RTCSessionDescription(
        offerData['sdp'],
        offerData['type'],
      );
      
      // Set remote description
      await _peerConnection!.setRemoteDescription(offer);
      
      // Create answer
      RTCSessionDescription answer = await _peerConnection!.createAnswer(_sdpConstraints);
      await _peerConnection!.setLocalDescription(answer);
      
      // Convert answer to map
      final answerMap = {
        'type': answer.type,
        'sdp': answer.sdp,
      };
      
      // Get call service
      final callService = ref.read(callServiceProvider);
      
      // Update call status to answered and set answer
      await callService.acceptCall(callId, answerMap);
      
      state = state.copyWith(
        callStatus: 'answered',
      );
      
      print("[CallController] Answer created and sent");
    } catch (e) {
      print("[CallController] Error processing offer or creating answer: $e");
      state = state.copyWith(
        connectionState: CallConnectionState.failed,
        errorMessage: "Failed to answer call: $e",
      );
    }
  }

  // Process answer
  Future<void> _processAnswer(Map<String, dynamic> answerData) async {
    try {
      print("[CallController] Processing answer...");
      
      // Create RTCSessionDescription from answer
      final RTCSessionDescription answer = RTCSessionDescription(
        answerData['sdp'],
        answerData['type'],
      );
      
      // Set remote description
      await _peerConnection!.setRemoteDescription(answer);
      
      state = state.copyWith(
        callStatus: 'answered',
      );
      
      print("[CallController] Answer processed");
    } catch (e) {
      print("[CallController] Error processing answer: $e");
      state = state.copyWith(
        connectionState: CallConnectionState.failed,
        errorMessage: "Failed to process call answer: $e",
      );
    }
  }

  // Listen for call document changes
  void _listenForCallDocumentChanges() {
    final callService = ref.read(callServiceProvider);
    
    _callDocSubscription = callService.getCallDocStream(callId).listen((snapshot) {
      if (!snapshot.exists) {
        print("[CallController] Call document no longer exists");
        state = state.copyWith(
          connectionState: CallConnectionState.ended,
          callStatus: 'ended',
        );
        return;
      }
      
      final data = snapshot.data() as Map<String, dynamic>;
      final status = data['status'] as String?;
      
      print("[CallController] Call status update: $status");
      
      state = state.copyWith(callStatus: status);
      
      switch (status) {
        case 'pending':
          // Only update state if we're not in a later state already
          if (state.connectionState == CallConnectionState.connecting) {
            state = state.copyWith(
              connectionState: CallConnectionState.connecting,
            );
          }
          break;
        case 'ringing':
          if (state.connectionState == CallConnectionState.connecting) {
            state = state.copyWith(
              connectionState: CallConnectionState.ringing,
            );
          }
          // If we're the callee and there's an offer, process it
          if (!isCaller && data.containsKey('offer') && data['offer'] != null) {
            _processOfferAndCreateAnswer(data['offer']);
          }
          break;
        case 'answered':
          // If we're the caller and there's an answer, process it
          if (isCaller && data.containsKey('answer') && data['answer'] != null) {
            _processAnswer(data['answer']);
          }
          break;
        case 'rejected':
          hangUp();
          state = state.copyWith(
            connectionState: CallConnectionState.ended,
            callStatus: 'rejected',
          );
          break;
        case 'ended':
          hangUp();
          state = state.copyWith(
            connectionState: CallConnectionState.ended,
          );
          break;
      }
      
      // Once call is answered, start listening for ICE candidates if we haven't already
      if (status == 'answered' && !_hasAddedIceCandidates) {
        _listenForRemoteCandidates();
        _hasAddedIceCandidates = true;
      }
    }, onError: (e) {
      print("[CallController] Error listening to call document: $e");
      state = state.copyWith(
        connectionState: CallConnectionState.failed,
        errorMessage: "Error monitoring call: $e",
      );
    });
  }

  // Listen for remote ICE candidates
  void _listenForRemoteCandidates() {
    final callService = ref.read(callServiceProvider);
    
    if (isCaller) {
      // Caller listens for callee candidates
      _calleeCandidatesSubscription = callService.getCalleeCandidatesStream(callId).listen((snapshot) {
        snapshot.docChanges.forEach((change) {
          if (change.type == DocumentChangeType.added) {
            final data = change.doc.data() as Map<String, dynamic>;
            print("[CallController] Got new callee ICE candidate");
            _peerConnection?.addCandidate(
              RTCIceCandidate(
                data['candidate'],
                data['sdpMid'],
                data['sdpMLineIndex'],
              ),
            );
          }
        });
      });
    } else {
      // Callee listens for caller candidates
      _callerCandidatesSubscription = callService.getCallerCandidatesStream(callId).listen((snapshot) {
        snapshot.docChanges.forEach((change) {
          if (change.type == DocumentChangeType.added) {
            final data = change.doc.data() as Map<String, dynamic>;
            print("[CallController] Got new caller ICE candidate");
            _peerConnection?.addCandidate(
              RTCIceCandidate(
                data['candidate'],
                data['sdpMid'],
                data['sdpMLineIndex'],
              ),
            );
          }
        });
      });
    }
  }

  // Toggle mute
  void toggleMute() {
    if (state.localStream == null) return;
    
    bool currentMuteState = state.isMuted;
    state.localStream!.getAudioTracks().forEach((track) {
      track.enabled = currentMuteState; // Toggle: If muted, enable; if not muted, disable
    });
    
    state = state.copyWith(isMuted: !currentMuteState);
    print("[CallController] Mic ${!currentMuteState ? 'muted' : 'unmuted'}");
  }

  // Toggle speaker
  void toggleSpeaker() {
    if (state.remoteStream == null) return;
    
    // This is a simplified version. In a real implementation, this would use platform-specific
    // audio routing APIs to switch between speaker and earpiece.
    bool currentSpeakerState = state.isSpeakerOn;
    
    // For now, we just update the state. The actual audio output switching would need native code.
    state = state.copyWith(isSpeakerOn: !currentSpeakerState);
    print("[CallController] Speaker ${!currentSpeakerState ? 'on' : 'off'}");
  }

  // Hang up call
  Future<void> hangUp() async {
    // Update call status to ended if we're in an active state
    if (state.callStatus == 'pending' || state.callStatus == 'ringing' || state.callStatus == 'answered') {
      try {
        final callService = ref.read(callServiceProvider);
        await callService.updateCallStatus(callId, 'ended');
      } catch (e) {
        print("[CallController] Error updating call status to ended: $e");
      }
    }

    // Clean up resources
    _cleanupResources();
    
    // Update state
    state = state.copyWith(
      connectionState: CallConnectionState.ended,
      callStatus: 'ended',
    );
  }

  // Clean up resources
  void _cleanupResources() {
    // Clean up subscriptions
    _callDocSubscription?.cancel();
    _callerCandidatesSubscription?.cancel();
    _calleeCandidatesSubscription?.cancel();
    
    // Close tracks
    state.localStream?.getTracks().forEach((track) => track.stop());
    state.remoteStream?.getTracks().forEach((track) => track.stop());
    
    // Close peer connection
    _peerConnection?.close();
    _peerConnection = null;
  }

  @override
  void dispose() {
    print("[CallController] Disposing controller");
    _cleanupResources();
    super.dispose();
  }
}

// Provider for call controller
final callControllerProvider = StateNotifierProvider.autoDispose
    .family<CallController, CallControllerState, ({String callId, bool isCaller})>(
  (ref, params) => CallController(ref, params.callId, params.isCaller),
); 