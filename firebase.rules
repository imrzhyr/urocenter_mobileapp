rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() { return request.auth != null; }
    function isUser(userId) { return request.auth.uid == userId; }
    function getUserData(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) ?
             get(/databases/$(database)/documents/users/$(userId)).data :
             null;
    }
    function isAdmin() {
      let userData = getUserData(request.auth.uid);
      return isSignedIn() &&
             userData != null &&
             userData.keys().hasAny(['isAdmin']) &&
             userData.isAdmin == true;
    }
    // --- Chat Specific Helper Functions ---
    function getChatId(uid1, uid2) {
      return (uid1 == null || uid2 == null) ?
             'invalid_chat_id_null_input' :
             (uid1 < uid2 ? uid1 + '_' + uid2 : uid2 + '_' + uid1);
    }
    // Renamed to avoid confusion: Checks EXISTING doc
    function isExistingParticipant(chatId) {
      let chatDoc = /databases/$(database)/documents/chats/$(chatId);
      return isSignedIn() &&
             exists(chatDoc) &&
             get(chatDoc).data.keys().hasAny(['participants']) &&
             get(chatDoc).data.participants.hasAny([request.auth.uid]);
    }
     // Helper to check participants in the *request* data (for create)
    function isRequestingParticipant(requestData) {
        return requestData != null &&
               requestData.keys().hasAny(['participants']) &&
               requestData.participants.hasAny([request.auth.uid]);
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isUser(userId) || isAdmin();

      match /documents/{documentId} {
        allow read, create, update, delete: if isSignedIn() && (isUser(userId) || isAdmin());
      }
      match /notifications/{notificationId} {
        allow read, update, delete: if isSignedIn() && (isUser(userId) || isAdmin());
        allow create: if isSignedIn();
      }
    }

    // --- Chats ---
    match /chats/{chatId} {
      // Allow any authenticated user to list/query the chats collection
      allow list: if isSignedIn();
      
      // Allow document read only if user is a participant
      allow get: if isSignedIn() && (
                    isExistingParticipant(chatId) || 
                    isAdmin()
                  );
      allow create: if isSignedIn() && (
                      isRequestingParticipant(request.resource.data) || 
                      isAdmin()
                    );
      allow update: if isSignedIn() && (
                      isExistingParticipant(chatId) || 
                      isAdmin()
                    );
      allow delete: if isAdmin();
      
      // Messages within a chat
      match /messages/{messageId} {
        allow read: if isSignedIn() && (
                      isExistingParticipant(chatId) || 
                      isAdmin()
                    );
        allow create: if isSignedIn() && (
                        isExistingParticipant(chatId) || 
                        (request.resource.data.senderId == 'system') || 
                        (request.resource.data.senderId == request.auth.uid) ||
                        isAdmin()
                      );
        allow update: if isSignedIn() && (
                        (resource.data.senderId == request.auth.uid) ||
                        (request.resource.data.senderId == 'system') ||
                        isAdmin()
                      );
        allow delete: if isSignedIn() && (
                        resource.data.senderId == request.auth.uid || 
                        isAdmin()
                      );
      }
    }

    // --- Video Calls ---
    match /calls/{callId} {
      // Helper function to check if user is participant in call
      function isCallParticipant() {
        let callData = resource.data;
        return isSignedIn() && 
               callData != null && 
               (callData.callerId == request.auth.uid || 
                callData.calleeId == request.auth.uid);
      }
      
      // Helper for new call creation
      function isCallParticipantInRequest() {
        let callData = request.resource.data;
        return isSignedIn() && 
               callData != null && 
               (callData.callerId == request.auth.uid || 
                callData.calleeId == request.auth.uid);
      }
      
      // Allow creating a call if you're either the caller or callee in the request
      allow create: if isCallParticipantInRequest() || isAdmin();
      
      // Allow reading a call document if you're a participant or an admin
      allow read: if isCallParticipant() || isAdmin();
      
      // Allow updating if you're a participant or admin
      allow update: if isCallParticipant() || isAdmin();
      
      // Only admins can delete call records
      allow delete: if isAdmin();
      
      // Allow access to ICE candidate subcollections
      match /callerCandidates/{candidateId} {
        allow read, write: if isSignedIn() && 
                             (get(/databases/$(database)/documents/calls/$(callId)).data.callerId == request.auth.uid || 
                              get(/databases/$(database)/documents/calls/$(callId)).data.calleeId == request.auth.uid || 
                              isAdmin());
      }
      
      match /calleeCandidates/{candidateId} {
        allow read, write: if isSignedIn() && 
                             (get(/databases/$(database)/documents/calls/$(callId)).data.callerId == request.auth.uid || 
                              get(/databases/$(database)/documents/calls/$(callId)).data.calleeId == request.auth.uid || 
                              isAdmin());
      }
    }

    // --- Agora Tokens ---
    match /agora_tokens/{channelName} {
      // Allow reading tokens for authenticated users
      allow read: if isSignedIn();
      // Only admins can create/update/delete tokens
      allow write: if isAdmin();
    }

    // --- Schedule and Appointments ---
    match /appointments/{appointmentId} {
      allow read: if isSignedIn() && (
                     resource.data.patientId == request.auth.uid || 
                     resource.data.doctorId == request.auth.uid || 
                     isAdmin()
                  );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
                       resource.data.patientId == request.auth.uid || 
                       resource.data.doctorId == request.auth.uid || 
                       isAdmin()
                    );
      allow delete: if isSignedIn() && (
                       resource.data.patientId == request.auth.uid || 
                       isAdmin()
                    );
    }

    // --- System settings ---
    match /settings/{settingId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // --- App Content ---
    match /content/{contentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
} 